"""
Create a program that uses comparison operators (< > <= >=).
You must use the class' datafile, 'responses.csv' and analyze it
    to make at least 2 interesting observations.
You may use user input to add interactivity to the program.
You must design your algorithm in English first, then translate it to Python code.
Test as you go! Describe in your comments what steps you took to test your code.
"""
""" My assignment
    I plan to make a program that asks the user a survey, and based on the results, the program will find the top 3 names with the 
most similarities to the results of the survey,
it will then display the results along with a unique comment based 
on the score of each individual person.

1.) I create a bunch of temporate variables and lists 
to hold peoples names, survey questions, user response, peoples similarity scores
the top three most similar people and the best similar person.
2.)I then use a for loop to dispense questions in the the survey list one by one and puttig the users response into an empty list called userlist
3.) Now the program will use a nested for loop to check each indidual line/person and give them a score on how many similarities they have with the user survey results 
4.) I put in all those scores in a list. I run a nested for loop to find the highest score
within the list of scores generated at the end of the first nested for loop. 
5.)It will then record the score and name of the most similar person within 2 different variables, saving it which the nested for loop 
will then exclude when it is run the next time.
6.) In order to find  the top 3, this nested for loop to find the highest
score is run 3 times with a for loop each time excluding the best person
so the first, second, and third place is found.
7.)To output the results, I create a list of the rankings and results
and base my responses off that
8.) I use a for loop that will print
('Your (first second or third) best match is (brendan yap, ethan wong, serene lee)')
based on the score of similarity between each person in and you the program
will use if statements to display a different comment for each result

    ex.)
What is your full name?jeremy wong
What is your favourite number?8
What is your favourite pet?cat
What is your favourite subject?math
What is your favourite sport to play?football
What is your favourite sport to watch?football
What is your favourite genre of music?k-pop
What is your favourite movie genre?adventure
What is your favourite place to eat?bubble waffle



Your first best match is serene lee
With a score of 4/8!
Wow, you have alot in common with them!

Your second best match is jayden wong
With a score of 3/8!
We all have our differences.

Your third best match is gabe armour
With a score of 3/8!
We all have our differences.

    Possible errors:
Because in the origional database each person is listed by a number 
when entering your favourite number the program will count the 
list number of the person a similarity trait if it matches 
with your favourite number since the nested for loop checks each
individual value in the userlist with the personlist and since the 
occurance of the number is at the start of the list, the for loop will
count it as a similarity. 

    EX: 
userlist = [8, cat, math, football, football, k-pop, adventure, bubble waffle]
personlist = [8, evan chan, 8, dog, science, basketball, basketball, classical, romcom, A&W]
similarity score = 2

Here the similarity score would equal 2 since there are two 8s or a similarity between
the two lists, this could cause a potential error or inaccurate calculations

"""
file = open("2.4/responses.csv")
#Opens the database file once
survey = ['What is your favourite number?', 'What is your favourite pet?', 'What is your favourite subject?', 'What is your favourite sport to play?', 'What is your favourite sport to watch?', 'What is your favourite genre of music?', 'What is your favourite movie genre?', 'What is your favourite place to eat?']
#This list will store the survey questions that are asked to the user
userlist = []
#This empty list will contain the user's response
bestperson = ''
#this variable will contain the person with the highest similarity to the user
listofscores = []
#this empty list will contain the list of scores 
#generated by the first for loop nested section
listofnames = []
#This empty list contains all the names in the database
topthree = []
#list to contain the top 3 names with most similarity to the user
placementofnum = 0
#Variable to store the current placement number of the best winner 
rankscore = []
#empty list to store the score of the top 3 most similar names
name = input('What is your full name?').lower().strip() 
#gets the name of the user and stores it in a variable this is seperate from the user survey results
for quesion in survey:
    #This for loop will repeatedly ask the questions in the survey 
    # variable one at a time
    #Then will use append to put each response from the user into 
    #urlist variable
    question = input(quesion).lower().strip()
    userlist.append(question)
#>>>>>>>>>>>>>>>>>>>>>>>>>>>
junk = file.readline()
#Reads and discards the first line of the database which is 
#useless and may cause future errors
for line in file:
    #This for loop will iterate another for loop
    #for as many lines there are in the file of 
    #the database
    tally = 0
    #resets the tally to 0 after the score of the person is 
    #recorded in rank list
    for x in range(len(userlist)):
        #This for loop will run for however many qualities there are in userlist
        personlist = line.lower().split(',')
        #turns each line into a list and stores it in a variable
        if name in personlist:
            continue
        #checks if the line contains the users name and skips over it 
        #preventing the program from finding the user itself as the best match
        if userlist[x] in personlist:
        #checks each individual quality in personlist 
        #and adds one to the tally for each quality
            tally += 1
    listofscores.append(tally)
    #at the end of the for loop it adds the value of the tally to a list
    #before it is reset to 0
    listofnames.append(personlist[1])
    #at the end of the for loop adds the name of the person
    #to the listofnames before personlist is reset to the next person
#print(str(listofscores))
#>>>>>>>>>>>>>>>>>>>>>>>>>>>
print('\n')# prints new line for aesthetic
for a in range(3):
    #this for loop will run 3 times
    index = -1
    bestmatchscore = 0
    #reseting the index and bestmatchscore variables 3 times
    if bestperson in listofnames:
    #checks if the best person is in the list
    #if so, it will remove the value and the score 
    #then allowing the for loop to continue
    #finding the most similar person without the value of the best person
            listofnames.remove(bestperson)
            listofscores.pop(placementofnum)
            #print('removed first person')
    for i in listofscores:
        #iterates for the ammount of values in listofscores
        index += 1
        #records the current placement or index of the value ex.
        # (5, 6, 7)
        #if the for loop is checking 7
        #index would equal 3 
        if i > bestmatchscore:
        #checks if i is greater than the bestmatchscore
            bestmatchscore = i
        #if so, sets the bestmatch score = 1 & 
        #stores the name of the person in the first variable
        #stores the placement of the score in placementofnum
        #creates system where a score is constantly being
        #replaced by a newer higher one until the highest one is found
            bestperson = listofnames[index]
            #saves the person with the highest score
            #print('variable first has changed')
            placementofnum = index
            #saves the current index of the person with the highest score
    rankscore.append(bestmatchscore)
    topthree.append(bestperson)
    #at the end of the for loop it adds the values and scores of the best
    #person to two different lists (this goes on until top 3 is found)
    #eg 
    # topthree = [serene lee, jayden wong, gabe armour]
    # rankscore = [4, 3, 3]
#print(str(best))
#print(str(rankscore))
place = ['first', 'second', 'third']
#temporate list to hold words
#I didn't want to write 9 if statements
#I used a for loop that will run for the ammount of values in rankscore list
#since it will run 3 times,
#Your    best match is   . &
#With a score of    /8!
#is being written 3 times
#each time the rank & score out of 8 is different.
#I also used if statements to check each individual score if it is greater 
#or equal to 4 less than 4 and greater or equal to 2 based on those conditions, the program
#will dispense a different response for each of the 3 names
for b in range(len(rankscore)):
    print('\nYour ' + place[b] + ' best match is ' + str(topthree[b]))
    print('With a score of ' + str(rankscore[b]) + '/8!')
    if rankscore[b] >= 4:
        print('Wow, you have alot in common with them!')
    elif rankscore[b] < 4 and rankscore[b] >= 2:
        print('We all have our differences.')
    else:
        print('Wow, your truly unique!')

